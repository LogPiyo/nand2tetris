// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // in of A register
    Mux16(a=outALU, b=instruction, sel=A, out=outMux1);

    // A register
    ARegister(in=outMux1, load=loadRegA, out=outA, out[0..14]=addressM);

    // D register
    DRegister(in=outALU, load=d1, out=outD);

    // y of ALU
    Mux16(a=outA, b=inM, sel=a, out=outMux2);

    ALU(x=outD, y=outMux2, zx=c0, nx=c1, zy=c2, ny=c3, f=c4, no=c5, out=outM, out=outALU, zr=zr, ng=ng);
    PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);

    // load of A Register
    Or(a=A, b=d0, out=loadRegA);

    // writeM
    Or(a=d2, out=writeM);

    // load of PC
    Not(in=ng, out=nng);
    Not(in=zr, out=nzr);
    And(a=nng, b=nzr, out=ps);
    And(a=j0, b=ng, out=loadPC1);
    And(a=j1, b=zr, out=loadPC2);
    And(a=j2, b=ps, out=loadPC3);
    Or(a=loadPC1, b=loadPC2, out=loadPC4);
    Or(a=loadPC3, b=loadPC4, out=loadPC);

    // inc of PC
    Not(in=loadPC, out=incPC);

    // C instruction
    Or(a=instruction[15], out=C);
    Not(in=instruction[15], out=A);
    And(a=C, b=instruction[12], out=a);
    And(a=C, b=instruction[11], out=c0);
    And(a=C, b=instruction[10], out=c1);
    And(a=C, b=instruction[9], out=c2);
    And(a=C, b=instruction[8], out=c3);
    And(a=C, b=instruction[7], out=c4);
    And(a=C, b=instruction[6], out=c5);
    And(a=C, b=instruction[5], out=d0);
    And(a=C, b=instruction[4], out=d1);
    And(a=C, b=instruction[3], out=d2);
    And(a=C, b=instruction[2], out=j0);
    And(a=C, b=instruction[1], out=j1);
    And(a=C, b=instruction[0], out=j2);
}